#include<stdio.h>
#include<unistd.h>
#include <sys/types.h>
int main()
{
 pid_t pid;
 pid=fork();
 if (pid<0)
 {
 perror("failure");
 return 1;
 }
 else if (pid==0)
 {
 printf("Child process\n");
 printf("pid= %d\n",getpid());
 printf("child pid = %d",getppid());

 }
 else
 {
 printf("parent process\n");
 printf("pid= %d\n",getpid());
 printf("parent pid = %d\n",pid);
 }
 return 0;
}


#include <stdio.h>
#include <stdlib.h>
int main() {
 int n, head, total_movement = 0;
 // Input number of requests
 printf("Enter the number of requests: ");
 scanf("%d", &n);
 int requests[n];
 // Input request sequence
 printf("Enter the requests (cylinder numbers):\n");
 for (int i = 0; i < n; i++) {
 scanf("%d", &requests[i]);
 }
 // Input initial head position
 printf("Enter the initial head position: ");
 scanf("%d", &head);
 // Calculate total head movement
 for (int i = 0; i < n; i++) {
 total_movement += abs(requests[i] - head);
 head = requests[i];
 }
 // Output total head movement
 printf("Total Head Movement: %d\n", total_movement);
 return 0;
}


#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <string.h>
struct message {
 long msg_type;
 char msg_text[100];
};
int main() {
 key_t key;
 int msgid;
 struct message msg;
 key = ftok("progfile", 65);
 msgid = msgget(key, 0666 | IPC_CREAT);
 msg.msg_type = 1;
 strcpy(msg.msg_text, "Hello, world!");
 msgsnd(msgid, &msg, sizeof(msg.msg_text), 0);
 printf("Message sent: %s\n", msg.msg_text);
 msgrcv(msgid, &msg, sizeof(msg.msg_text), 1, 0);
 printf("Message received: %s\n", msg.msg_text);
 return 0;
}



#include <stdio.h>
#include <pthread.h>
void* myThreadFunction(void* arg) {
 printf("Hello from the thread!\n");
 return NULL;
}
int main() {
 pthread_t thread;
 pthread_create(&thread, NULL, myThreadFunction, NULL);
 pthread_join(thread, NULL);
 printf("Thread has finished execution.\n");
 return 0;
}



#include <stdio.h>
int main() {
 int n, i;
 printf("Enter the number of processes: ");
 scanf("%d", &n);
 int burst_time[n], waiting_time[n], turnaround_time[n];
 float total_waiting_time = 0, total_turnaround_time = 0;
 printf("Enter the burst times of the processes:\n");
 for (i = 0; i < n; i++) {
 printf("Process %d: ", i + 1);
 scanf("%d", &burst_time[i]);
 }
 // Calculate waiting time
 waiting_time[0] = 0; // First process has no waiting time
 for (i = 1; i < n; i++) {
 waiting_time[i] = waiting_time[i - 1] + burst_time[i - 1];
 }
 // Calculate turnaround time
 for (i = 0; i < n; i++) {
 turnaround_time[i] = waiting_time[i] + burst_time[i];
 }
 // Calculate total waiting time and total turnaround time
 for (i = 0; i < n; i++) {
 total_waiting_time += waiting_time[i];
 total_turnaround_time += turnaround_time[i];
 }
 // Display the results
 printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
 for (i = 0; i < n; i++) {
 printf("%d\t%d\t\t%d\t\t%d\n", i + 1, burst_time[i],
waiting_time[i], turnaround_time[i]);
 }
 // Calculate and display averages
 printf("\nAverage Waiting Time: %.2f\n", total_waiting_time / n);
 printf("Average Turnaround Time: %.2f\n", total_turnaround_time /
n);
 return 0;
}


#include <stdio.h>
#include <stdlib.h>
#define MAX_BLOCKS 5
typedef struct {
 int block_number;
 char data[100];
} Block;
int main() {
 Block index_block[MAX_BLOCKS];
 Block blocks[MAX_BLOCKS] = {
 {1, "Data Block 1"},
 {2, "Data Block 2"},
 {3, "Data Block 3"},
 {4, "Data Block 4"},
 {5, "Data Block 5"}
 };
 for (int i = 0; i < MAX_BLOCKS; i++) {
 index_block[i].block_number = blocks[i].block_number;
 snprintf(index_block[i].data, 100, "Data at block %d: %s",
blocks[i].block_number, blocks[i].data);
 }
 printf("Index Block Mapping:\n");
 for (int i = 0; i < MAX_BLOCKS; i++) {
 printf("Index %d -> Block %d: %s\n", i,
index_block[i].block_number, index_block[i].data);
 }
 return 0;
}



#include <stdio.h>
typedef struct {
 int id;
 char name[50];
 float salary;
} Employee;
int main() {
 FILE *file = fopen("employees.dat", "w+");
 Employee e1 = {1, "John Doe", 50000};
 fwrite(&e1, sizeof(Employee), 1, file);
 fseek(file, 0, SEEK_SET);

 Employee e2;
 fread(&e2, sizeof(Employee), 1, file);
 printf("Employee ID: %d, Name: %s, Salary: %.2f\n", e2.id,
e2.name, e2.salary);
 fclose(file);
 return 0;
}



#include<stdio.h>
int main() {
    int arr[] = {4, 1, 2, 4, 5};
    int frames = 4;
    int pagefaults = 0, pagehits = 0;
    int pages = sizeof arr / sizeof arr[0];
    int temp[frames], i, j;

    // Initialize all frames to -1 (indicating empty frames)
    for (i = 0; i < frames; i++) {
        temp[i] = -1;
    }

    // Process each page in the input array
    for (i = 0; i < pages; i++) {
        int pagefound = 0; // Flag to check if the page is already in memory

        // Check if the page is already in the frames (page hit)
        for (j = 0; j < frames; j++) {
            if (temp[j] == arr[i]) { // Page found in one of the frames
                pagefound = 1;
                pagehits++; // Increment page hits
                break;
            }
        }

        // If the page is not found (page fault)
        if (!pagefound) {
            temp[pagefaults % frames] = arr[i]; // Replace the oldest page using FIFO
            pagefaults++; // Increment page faults
        }
    }

    // Print results
    printf("Total Page Faults: %d\n", pagefaults);
    printf("Total Page Hits: %d\n", pagehits);
    return 0;
}



#include <stdio.h> 
#include <stdlib.h> 
 
int main() 
{ 
FILE *fptr1, *fptr2; char 
filename[100], c; 
 
printf("Enter the filename to open for reading \n"); scanf("%s", filename); 
fptr1 = fopen(filename, "r"); if 
(fptr1 == NULL) 
{ printf("Cannot open file %s \n", filename); exit(0); 
} 
 
printf("Enter the filename to open for writing \n"); scanf("%s", filename); 
fptr2 = fopen(filename, "w"); if 
(fptr2 == NULL) 
{ printf("Cannot open file %s \n", filename); exit(0); 
} c = fgetc(fptr1); while (c != EOF) 
{ fputc(c, fptr2); c 
= fgetc(fptr1); 
} 
 
printf("\nContents copied to %s", filename); 
 
fclose(fptr1); fclose(fptr2); return 0; 
}



#include <stdio.h>
#include <stdlib.h>

int main() {
    // Create directory
    system("mkdir cse");

    // Create and write to file A
    FILE *fileA = fopen("cse/A.txt", "w");
    fprintf(fileA, "This is file A.\n");
    fclose(fileA);

    // Create and write to file B
    FILE *fileB = fopen("cse/B.txt", "w");
    fprintf(fileB, "This is file B.\n");
    fclose(fileB);

    // Create and write to file C
    FILE *fileC = fopen("cse/C.txt", "w");
    fprintf(fileC, "This is file C.\n");
    fclose(fileC);

    return 0;
}





#include <stdio.h>
#define MAX 100

void allocate(int blocks[], int m, int processes[], int n, char *strategy) {
    int allocation[MAX] = {-1}, i, j;
    for (i = 0; i < n; i++) {
        int idx = -1;
        for (j = 0; j < m; j++) {
            if (blocks[j] >= processes[i]) {
                if (idx == -1 || 
                   (strcmp(strategy, "Best-Fit") == 0 && blocks[j] < blocks[idx]) ||
                   (strcmp(strategy, "Worst-Fit") == 0 && blocks[j] > blocks[idx])) {
                    idx = j;
                }
            }
        }
        if (idx != -1) {
            allocation[i] = idx;
            blocks[idx] -= processes[i];
        }
    }
    for (i = 0; i < n; i++)
        printf("Process %d -> Block %d\n", i + 1, allocation[i] + 1);
}

int main() {
    int blocks[] = {100, 500, 200, 300, 600}, processes[] = {212, 417, 112, 426};
    int m = 5, n = 4;
    printf("First-Fit:\n");
    allocate(blocks, m, processes, n, "First-Fit");
    return 0;
}
