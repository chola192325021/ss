#include<stdio.h>
#include<unistd.h>
#include <sys/types.h>
int main()
{
 pid_t pid;
 pid=fork();
 if (pid<0)
 {
 perror("failure");
 return 1;
 }
 else if (pid==0)
 {
 printf("Child process\n");
 printf("pid= %d\n",getpid());
 printf("child pid = %d",getppid());

 }
 else
 {
 printf("parent process\n");
 printf("pid= %d\n",getpid());
 printf("parent pid = %d\n",pid);
 }
 return 0;
}


#include <stdio.h>
#include <stdlib.h>
int main() {
 int n, head, total_movement = 0;
 // Input number of requests
 printf("Enter the number of requests: ");
 scanf("%d", &n);
 int requests[n];
 // Input request sequence
 printf("Enter the requests (cylinder numbers):\n");
 for (int i = 0; i < n; i++) {
 scanf("%d", &requests[i]);
 }
 // Input initial head position
 printf("Enter the initial head position: ");
 scanf("%d", &head);
 // Calculate total head movement
 for (int i = 0; i < n; i++) {
 total_movement += abs(requests[i] - head);
 head = requests[i];
 }
 // Output total head movement
 printf("Total Head Movement: %d\n", total_movement);
 return 0;
}


#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <string.h>
struct message {
 long msg_type;
 char msg_text[100];
};
int main() {
 key_t key;
 int msgid;
 struct message msg;
 key = ftok("progfile", 65);
 msgid = msgget(key, 0666 | IPC_CREAT);
 msg.msg_type = 1;
 strcpy(msg.msg_text, "Hello, world!");
 msgsnd(msgid, &msg, sizeof(msg.msg_text), 0);
 printf("Message sent: %s\n", msg.msg_text);
 msgrcv(msgid, &msg, sizeof(msg.msg_text), 1, 0);
 printf("Message received: %s\n", msg.msg_text);
 return 0;
}



#include <stdio.h>
#include <pthread.h>
void* myThreadFunction(void* arg) {
 printf("Hello from the thread!\n");
 return NULL;
}
int main() {
 pthread_t thread;
 pthread_create(&thread, NULL, myThreadFunction, NULL);
 pthread_join(thread, NULL);
 printf("Thread has finished execution.\n");
 return 0;
}



#include <stdio.h>
int main() {
 int n, i;
 printf("Enter the number of processes: ");
 scanf("%d", &n);
 int burst_time[n], waiting_time[n], turnaround_time[n];
 float total_waiting_time = 0, total_turnaround_time = 0;
 printf("Enter the burst times of the processes:\n");
 for (i = 0; i < n; i++) {
 printf("Process %d: ", i + 1);
 scanf("%d", &burst_time[i]);
 }
 // Calculate waiting time
 waiting_time[0] = 0; // First process has no waiting time
 for (i = 1; i < n; i++) {
 waiting_time[i] = waiting_time[i - 1] + burst_time[i - 1];
 }
 // Calculate turnaround time
 for (i = 0; i < n; i++) {
 turnaround_time[i] = waiting_time[i] + burst_time[i];
 }
 // Calculate total waiting time and total turnaround time
 for (i = 0; i < n; i++) {
 total_waiting_time += waiting_time[i];
 total_turnaround_time += turnaround_time[i];
 }
 // Display the results
 printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
 for (i = 0; i < n; i++) {
 printf("%d\t%d\t\t%d\t\t%d\n", i + 1, burst_time[i],
waiting_time[i], turnaround_time[i]);
 }
 // Calculate and display averages
 printf("\nAverage Waiting Time: %.2f\n", total_waiting_time / n);
 printf("Average Turnaround Time: %.2f\n", total_turnaround_time /
n);
 return 0;
}


#include <stdio.h>
#include <stdlib.h>
#define MAX_BLOCKS 5
typedef struct {
 int block_number;
 char data[100];
} Block;
int main() {
 Block index_block[MAX_BLOCKS];
 Block blocks[MAX_BLOCKS] = {
 {1, "Data Block 1"},
 {2, "Data Block 2"},
 {3, "Data Block 3"},
 {4, "Data Block 4"},
 {5, "Data Block 5"}
 };
 for (int i = 0; i < MAX_BLOCKS; i++) {
 index_block[i].block_number = blocks[i].block_number;
 snprintf(index_block[i].data, 100, "Data at block %d: %s",
blocks[i].block_number, blocks[i].data);
 }
 printf("Index Block Mapping:\n");
 for (int i = 0; i < MAX_BLOCKS; i++) {
 printf("Index %d -> Block %d: %s\n", i,
index_block[i].block_number, index_block[i].data);
 }
 return 0;
}
